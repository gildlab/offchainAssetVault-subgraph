/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface TestReceiptOwnerInterface extends utils.Interface {
  functions: {
    "authorizeReceiptTransfer(address,address)": FunctionFragment;
    "ownerBurn(address,address,uint256,uint256,bytes)": FunctionFragment;
    "ownerMint(address,address,uint256,uint256,bytes)": FunctionFragment;
    "ownerTransferFrom(address,address,address,uint256,uint256,bytes)": FunctionFragment;
    "setFrom(address)": FunctionFragment;
    "setTo(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "authorizeReceiptTransfer"
      | "ownerBurn"
      | "ownerMint"
      | "ownerTransferFrom"
      | "setFrom"
      | "setTo"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "authorizeReceiptTransfer",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerBurn",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerMint",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerTransferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setFrom",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTo",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "authorizeReceiptTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ownerBurn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerMint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFrom", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setTo", data: BytesLike): Result;

  events: {};
}

export interface TestReceiptOwner extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TestReceiptOwnerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    authorizeReceiptTransfer(
      from_: PromiseOrValue<string>,
      to_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    ownerBurn(
      receipt_: PromiseOrValue<string>,
      account_: PromiseOrValue<string>,
      id_: PromiseOrValue<BigNumberish>,
      amount_: PromiseOrValue<BigNumberish>,
      receiptInformation_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    ownerMint(
      receipt_: PromiseOrValue<string>,
      account_: PromiseOrValue<string>,
      id_: PromiseOrValue<BigNumberish>,
      amount_: PromiseOrValue<BigNumberish>,
      data_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    ownerTransferFrom(
      receipt_: PromiseOrValue<string>,
      from_: PromiseOrValue<string>,
      to_: PromiseOrValue<string>,
      id_: PromiseOrValue<BigNumberish>,
      amount_: PromiseOrValue<BigNumberish>,
      data_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFrom(
      from_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTo(
      to_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  authorizeReceiptTransfer(
    from_: PromiseOrValue<string>,
    to_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<void>;

  ownerBurn(
    receipt_: PromiseOrValue<string>,
    account_: PromiseOrValue<string>,
    id_: PromiseOrValue<BigNumberish>,
    amount_: PromiseOrValue<BigNumberish>,
    receiptInformation_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  ownerMint(
    receipt_: PromiseOrValue<string>,
    account_: PromiseOrValue<string>,
    id_: PromiseOrValue<BigNumberish>,
    amount_: PromiseOrValue<BigNumberish>,
    data_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  ownerTransferFrom(
    receipt_: PromiseOrValue<string>,
    from_: PromiseOrValue<string>,
    to_: PromiseOrValue<string>,
    id_: PromiseOrValue<BigNumberish>,
    amount_: PromiseOrValue<BigNumberish>,
    data_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFrom(
    from_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTo(
    to_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    authorizeReceiptTransfer(
      from_: PromiseOrValue<string>,
      to_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerBurn(
      receipt_: PromiseOrValue<string>,
      account_: PromiseOrValue<string>,
      id_: PromiseOrValue<BigNumberish>,
      amount_: PromiseOrValue<BigNumberish>,
      receiptInformation_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerMint(
      receipt_: PromiseOrValue<string>,
      account_: PromiseOrValue<string>,
      id_: PromiseOrValue<BigNumberish>,
      amount_: PromiseOrValue<BigNumberish>,
      data_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerTransferFrom(
      receipt_: PromiseOrValue<string>,
      from_: PromiseOrValue<string>,
      to_: PromiseOrValue<string>,
      id_: PromiseOrValue<BigNumberish>,
      amount_: PromiseOrValue<BigNumberish>,
      data_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFrom(
      from_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTo(
      to_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    authorizeReceiptTransfer(
      from_: PromiseOrValue<string>,
      to_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownerBurn(
      receipt_: PromiseOrValue<string>,
      account_: PromiseOrValue<string>,
      id_: PromiseOrValue<BigNumberish>,
      amount_: PromiseOrValue<BigNumberish>,
      receiptInformation_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    ownerMint(
      receipt_: PromiseOrValue<string>,
      account_: PromiseOrValue<string>,
      id_: PromiseOrValue<BigNumberish>,
      amount_: PromiseOrValue<BigNumberish>,
      data_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    ownerTransferFrom(
      receipt_: PromiseOrValue<string>,
      from_: PromiseOrValue<string>,
      to_: PromiseOrValue<string>,
      id_: PromiseOrValue<BigNumberish>,
      amount_: PromiseOrValue<BigNumberish>,
      data_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFrom(
      from_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTo(
      to_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    authorizeReceiptTransfer(
      from_: PromiseOrValue<string>,
      to_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownerBurn(
      receipt_: PromiseOrValue<string>,
      account_: PromiseOrValue<string>,
      id_: PromiseOrValue<BigNumberish>,
      amount_: PromiseOrValue<BigNumberish>,
      receiptInformation_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    ownerMint(
      receipt_: PromiseOrValue<string>,
      account_: PromiseOrValue<string>,
      id_: PromiseOrValue<BigNumberish>,
      amount_: PromiseOrValue<BigNumberish>,
      data_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    ownerTransferFrom(
      receipt_: PromiseOrValue<string>,
      from_: PromiseOrValue<string>,
      to_: PromiseOrValue<string>,
      id_: PromiseOrValue<BigNumberish>,
      amount_: PromiseOrValue<BigNumberish>,
      data_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFrom(
      from_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTo(
      to_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
