/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  TwoPriceOracleFactory,
  TwoPriceOracleFactoryInterface,
} from "../../../../contracts/oracle/price/TwoPriceOracleFactory";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "child",
        type: "address",
      },
    ],
    name: "DuplicateChild",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "implementation",
        type: "address",
      },
    ],
    name: "Implementation",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "child",
        type: "address",
      },
    ],
    name: "NewChild",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "data_",
        type: "bytes",
      },
    ],
    name: "createChild",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "base",
            type: "address",
          },
          {
            internalType: "address",
            name: "quote",
            type: "address",
          },
        ],
        internalType: "struct TwoPriceOracleConfig",
        name: "config_",
        type: "tuple",
      },
    ],
    name: "createChildTyped",
    outputs: [
      {
        internalType: "contract TwoPriceOracle",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "maybeChild_",
        type: "address",
      },
    ],
    name: "isChild",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061001961001e565b6100de565b600054610100900460ff161561008a5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100dc576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b610afe806100ed6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80632ea72a49146100465780638ce7fcc814610083578063fc91a89714610096575b600080fd5b6100596100543660046103b2565b6100df565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100596100913660046104a6565b61020d565b6100cf6100a43660046104e7565b73ffffffffffffffffffffffffffffffffffffffff1660009081526033602052604090205460ff1690565b604051901515815260200161007a565b60006100e9610268565b60006100f4836102db565b73ffffffffffffffffffffffffffffffffffffffff811660009081526033602052604090205490915060ff1615610174576040517fd23867da00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821660048201526024015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff811660008181526033602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558151338152908101929092527f7da70c4e5387d7038610b79ca7d304caaef815826e51e67cf247135387a79bce910160405180910390a1905061020860018055565b919050565b60006102628260405160200161024e9190815173ffffffffffffffffffffffffffffffffffffffff9081168252602092830151169181019190915260400190565b6040516020818303038152906040526100df565b92915050565b6002600154036102d4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161016b565b6002600155565b6000818060200190518101906102f1919061050b565b6040516102fd9061034d565b815173ffffffffffffffffffffffffffffffffffffffff90811682526020928301511691810191909152604001604051809103906000f080158015610346573d6000803e3d6000fd5b5092915050565b6105888061054183390190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156103ac576103ac61035a565b60405290565b6000602082840312156103c457600080fd5b813567ffffffffffffffff808211156103dc57600080fd5b818401915084601f8301126103f057600080fd5b8135818111156104025761040261035a565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019083821181831017156104485761044861035a565b8160405282815287602084870101111561046157600080fd5b826020860160208301376000928101602001929092525095945050505050565b73ffffffffffffffffffffffffffffffffffffffff811681146104a357600080fd5b50565b6000604082840312156104b857600080fd5b6104c0610389565b82356104cb81610481565b815260208301356104db81610481565b60208201529392505050565b6000602082840312156104f957600080fd5b813561050481610481565b9392505050565b60006040828403121561051d57600080fd5b610525610389565b825161053081610481565b815260208301516104db8161048156fe60c060405234801561001057600080fd5b5060405161058838038061058883398101604081905261002f916100b4565b80516001600160a01b0390811660805260208083018051831660a05260408051338152855185169381019390935290519092168183015290517f3928767a7b1aefe738102e15a05eb56cc29c394f05627cd33764d8d42f389ff79181900360600190a15061011c565b80516001600160a01b03811681146100af57600080fd5b919050565b6000604082840312156100c657600080fd5b604080519081016001600160401b03811182821017156100f657634e487b7160e01b600052604160045260246000fd5b60405261010283610098565b815261011060208401610098565b60208201529392505050565b60805160a05161043c61014c60003960008181609c015260db015260008181604b015261016c015261043c6000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80635001f3b514610046578063999b93af14610097578063a035b1fe146100be575b600080fd5b61006d7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b61006d7f000000000000000000000000000000000000000000000000000000000000000081565b6100c66100d4565b60405190815260200161008e565b60006102007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a035b1fe6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610144573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610168919061034f565b60017f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a035b1fe6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f9919061034f565b9190610205565b905090565b600061021b84670de0b6b3a76400008585610225565b90505b9392505050565b600080610233868686610282565b9050600183600281111561024957610249610368565b14801561026657506000848061026157610261610397565b868809115b15610279576102766001826103c6565b90505b95945050505050565b600080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff858709858702925082811083820303915050806000036102da578382816102d0576102d0610397565b049250505061021e565b8084116102e657600080fd5b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b60006020828403121561036157600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b80820180821115610400577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b9291505056fea2646970667358221220c6274c800bdaf7512616ac48c59639cbd4ef7232574bfed0574e24d9d60aa6f364736f6c63430008110033a2646970667358221220c9a81b50a5772a3778caca73ee9b2685472b44b48829320c18aeee81a3837e3464736f6c63430008110033";

type TwoPriceOracleFactoryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TwoPriceOracleFactoryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TwoPriceOracleFactory__factory extends ContractFactory {
  constructor(...args: TwoPriceOracleFactoryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TwoPriceOracleFactory> {
    return super.deploy(overrides || {}) as Promise<TwoPriceOracleFactory>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TwoPriceOracleFactory {
    return super.attach(address) as TwoPriceOracleFactory;
  }
  override connect(signer: Signer): TwoPriceOracleFactory__factory {
    return super.connect(signer) as TwoPriceOracleFactory__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TwoPriceOracleFactoryInterface {
    return new utils.Interface(_abi) as TwoPriceOracleFactoryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TwoPriceOracleFactory {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as TwoPriceOracleFactory;
  }
}
