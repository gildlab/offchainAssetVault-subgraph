/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  ChainlinkFeedPriceOracleFactory,
  ChainlinkFeedPriceOracleFactoryInterface,
} from "../../../../../contracts/oracle/price/chainlink/ChainlinkFeedPriceOracleFactory";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "child",
        type: "address",
      },
    ],
    name: "DuplicateChild",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "implementation",
        type: "address",
      },
    ],
    name: "Implementation",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "child",
        type: "address",
      },
    ],
    name: "NewChild",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "data_",
        type: "bytes",
      },
    ],
    name: "createChild",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "feed",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "staleAfter",
            type: "uint256",
          },
        ],
        internalType: "struct ChainlinkFeedPriceOracleConfig",
        name: "config_",
        type: "tuple",
      },
    ],
    name: "createChildTyped",
    outputs: [
      {
        internalType: "contract ChainlinkFeedPriceOracle",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "maybeChild_",
        type: "address",
      },
    ],
    name: "isChild",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061001961001e565b6100de565b600054610100900460ff161561008a5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100dc576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b610dff806100ed6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80631e232aaf146100465780632ea72a4914610083578063fc91a89714610096575b600080fd5b6100596100543660046103d1565b6100df565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b61005961009136600461040b565b610137565b6100cf6100a43660046104da565b73ffffffffffffffffffffffffffffffffffffffff1660009081526033602052604090205460ff1690565b604051901515815260200161007a565b60006101318260405160200161011d9190815173ffffffffffffffffffffffffffffffffffffffff1681526020918201519181019190915260400190565b604051602081830303815290604052610137565b92915050565b6000610141610265565b600061014c836102d8565b73ffffffffffffffffffffffffffffffffffffffff811660009081526033602052604090205490915060ff16156101cc576040517fd23867da00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821660048201526024015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff811660008181526033602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558151338152908101929092527f7da70c4e5387d7038610b79ca7d304caaef815826e51e67cf247135387a79bce910160405180910390a1905061026060018055565b919050565b6002600154036102d1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016101c3565b6002600155565b6000818060200190518101906102ee91906104fe565b6040516102fa90610347565b815173ffffffffffffffffffffffffffffffffffffffff16815260209182015191810191909152604001604051809103906000f080158015610340573d6000803e3d6000fd5b5092915050565b6108918061053983390190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156103a6576103a6610354565b60405290565b73ffffffffffffffffffffffffffffffffffffffff811681146103ce57600080fd5b50565b6000604082840312156103e357600080fd5b6103eb610383565b82356103f6816103ac565b81526020928301359281019290925250919050565b60006020828403121561041d57600080fd5b813567ffffffffffffffff8082111561043557600080fd5b818401915084601f83011261044957600080fd5b81358181111561045b5761045b610354565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019083821181831017156104a1576104a1610354565b816040528281528760208487010111156104ba57600080fd5b826020860160208301376000928101602001929092525095945050505050565b6000602082840312156104ec57600080fd5b81356104f7816103ac565b9392505050565b60006040828403121561051057600080fd5b610518610383565b8251610523816103ac565b8152602092830151928101929092525091905056fe60c060405234801561001057600080fd5b5060405161089138038061089183398101604081905261002f91610092565b80516001600160a01b039081166080526020808301805160a052604080513381528551909416928401929092525182820152517fd805b17f9f53cd312715f3a3479f5ec20737acdf90918bf27d8e8fc3345faa4d9181900360600190a150610103565b6000604082840312156100a457600080fd5b604080519081016001600160401b03811182821017156100d457634e487b7160e01b600052604160045260246000fd5b60405282516001600160a01b03811681146100ee57600080fd5b81526020928301519281019290925250919050565b60805160a05161075f6101326000396000818160b2015260fc015260008181604b015260db015261075f6000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806337a7b7d814610046578063a035b1fe14610097578063d2e9db49146100ad575b600080fd5b61006d7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b61009f6100d4565b60405190815260200161008e565b61009f7f000000000000000000000000000000000000000000000000000000000000000081565b60006101207f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610125565b905090565b60008060008473ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610175573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101999190610485565b50935050925050600082136101e2576040517f3351e26f000000000000000000000000000000000000000000000000000000008152600481018390526024015b60405180910390fd5b836101ed8242610504565b111561022f576040517f2730eb4800000000000000000000000000000000000000000000000000000000815260048101829052602481018590526044016101d9565b6102b68573ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561027d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a19190610517565b60ff1660006102af856102c1565b9190610331565b925050505b92915050565b60008082121561032d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f73697469766560448201526064016101d9565b5090565b6000808360120361034557849150506103a0565b83601211156103715750601283900361036961036282600a61065a565b86906103a7565b9150506103a0565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee8301610369858285610402565b9392505050565b6000826000036103b9575060006102bb565b828202828482816103cc576103cc610666565b04036103d857806103fa565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5b949350505050565b60008061041084600a61065a565b9050600061041e8287610695565b90506001846002811115610434576104346106d0565b14801561044a575061044682826106ff565b8614155b1561045d5761045a600182610716565b90505b95945050505050565b805169ffffffffffffffffffff8116811461048057600080fd5b919050565b600080600080600060a0868803121561049d57600080fd5b6104a686610466565b94506020860151935060408601519250606086015191506104c960808701610466565b90509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b818103818111156102bb576102bb6104d5565b60006020828403121561052957600080fd5b815160ff811681146103a057600080fd5b600181815b8085111561059357817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115610579576105796104d5565b8085161561058657918102915b93841c939080029061053f565b509250929050565b6000826105aa575060016102bb565b816105b7575060006102bb565b81600181146105cd57600281146105d7576105f3565b60019150506102bb565b60ff8411156105e8576105e86104d5565b50506001821b6102bb565b5060208310610133831016604e8410600b8410161715610616575081810a6102bb565b610620838361053a565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115610652576106526104d5565b029392505050565b60006103a0838361059b565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000826106cb577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b80820281158282048414176102bb576102bb6104d5565b808201808211156102bb576102bb6104d556fea2646970667358221220c7f63e7531602fcafe5d22bf033178c808b8deaea053f8435b3c7342296ea9e364736f6c63430008110033a26469706673582212209751c0380f94a66c727c42e3e17aaf39687434676f7bf04315597eb3ffbac01264736f6c63430008110033";

type ChainlinkFeedPriceOracleFactoryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ChainlinkFeedPriceOracleFactoryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ChainlinkFeedPriceOracleFactory__factory extends ContractFactory {
  constructor(...args: ChainlinkFeedPriceOracleFactoryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ChainlinkFeedPriceOracleFactory> {
    return super.deploy(
      overrides || {}
    ) as Promise<ChainlinkFeedPriceOracleFactory>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ChainlinkFeedPriceOracleFactory {
    return super.attach(address) as ChainlinkFeedPriceOracleFactory;
  }
  override connect(signer: Signer): ChainlinkFeedPriceOracleFactory__factory {
    return super.connect(signer) as ChainlinkFeedPriceOracleFactory__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ChainlinkFeedPriceOracleFactoryInterface {
    return new utils.Interface(
      _abi
    ) as ChainlinkFeedPriceOracleFactoryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ChainlinkFeedPriceOracleFactory {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ChainlinkFeedPriceOracleFactory;
  }
}
