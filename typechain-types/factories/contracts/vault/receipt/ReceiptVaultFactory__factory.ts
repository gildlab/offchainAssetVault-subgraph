/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  ReceiptVaultFactory,
  ReceiptVaultFactoryInterface,
} from "../../../../contracts/vault/receipt/ReceiptVaultFactory";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "child",
        type: "address",
      },
    ],
    name: "DuplicateChild",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroImplementation",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroReceiptFactory",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        components: [
          {
            internalType: "address",
            name: "implementation",
            type: "address",
          },
          {
            internalType: "address",
            name: "receiptFactory",
            type: "address",
          },
        ],
        indexed: false,
        internalType: "struct ReceiptVaultFactoryConfig",
        name: "config",
        type: "tuple",
      },
    ],
    name: "Construction",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "implementation",
        type: "address",
      },
    ],
    name: "Implementation",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "child",
        type: "address",
      },
    ],
    name: "NewChild",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "data_",
        type: "bytes",
      },
    ],
    name: "createChild",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "implementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "maybeChild_",
        type: "address",
      },
    ],
    name: "isChild",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "receiptFactory",
    outputs: [
      {
        internalType: "contract ReceiptFactory",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class ReceiptVaultFactory__factory {
  static readonly abi = _abi;
  static createInterface(): ReceiptVaultFactoryInterface {
    return new utils.Interface(_abi) as ReceiptVaultFactoryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ReceiptVaultFactory {
    return new Contract(address, _abi, signerOrProvider) as ReceiptVaultFactory;
  }
}
